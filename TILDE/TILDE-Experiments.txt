#documenting experiments on TILDE

#Learning left_inplace rule

train_data = ['edgepiece(wh,or)','edgepiece(wh,re)','edgepiece(wh,gr)','edgepiece(wh,bl)',
                'edgepiece(ye,or)','edgepiece(ye,re)','edgepiece(ye,gr)','edgepiece(ye,bl)',
                'edge_center1(ye,re,ye)','edge_center2(ye,re,re)',
                'edge_center1(ye,gr,ye)','edge_center2(ye,gr,gr)',
                'edge_center1(ye,bl,re)','edge_center2(ye,bl,or)',
                'edge_center1(ye,or,wh)','edge_center2(ye,or,bl)',
                'edge_center1(wh,re,or)','edge_center2(wh,re,gr)',
                'edge_center1(wh,gr,re)','edge_center2(wh,gr,gr)',
                'edge_center1(wh,or,wh)','edge_center2(wh,or,ye)',
                'edge_center1(wh,bl,ye)','edge_center2(wh,bl,re)',
                'opposite(wh,ye)','opposite(bl,gr)','opposite(or,re)','opposite(ye,wh)',
                'opposite(gr,bl)','opposite(re,or)',
                'adjacent(wh,bl)','adjacent(wh,or)','adjacent(wh,re)','adjacent(wh,gr)',
                'adjacent(bl,re)','adjacent(bl,or)','adjacent(gr,re)','adjacent(gr,or)',
                'adjacent(ye,bl)','adjacent(ye,or)','adjacent(ye,re)','adjacent(ye,gr)',
                'adjacent(bl,wh)','adjacent(or,wh)','adjacent(re,wh)','adjacent(gr,wh)',
                'adjacent(re,bl)','adjacent(or,bl)','adjacent(re,gr)','adjacent(or,gr)',
                'adjacent(bl,ye)','adjacent(or,ye)','adjacent(re,ye)','adjacent(gr,ye)']
train_pos = ['left_inplace(wh,or)','left_inplace(ye,re)','left_inplace(ye,gr)']
train_neg = ['left_inplace(wh,gr)','left_inplace(wh,re)','left_inplace(wh,bl)','left_inplace(ye,or)','left_inplace(ye,bl)']
target = 'left_inplace'
bk = ['left_inplace(+piece1,+piece2)',
    'edge_center1(+piece1,+piece2,+piece1)']

Rules: [('left_inplace(A,B):-edge_center1(A,B,A)', 1.0), ('left_inplace(A,B):-', 0.0)]

#Learning right_inplace rule

train_data = ['edgepiece(wh,or)','edgepiece(wh,re)','edgepiece(wh,gr)','edgepiece(wh,bl)',
            'edgepiece(ye,or)','edgepiece(ye,re)','edgepiece(ye,gr)','edgepiece(ye,bl)',
            'edge_center1(ye,re,ye)','edge_center2(ye,re,re)',
            'edge_center1(ye,gr,ye)','edge_center2(ye,gr,gr)',
            'edge_center1(ye,bl,re)','edge_center2(ye,bl,or)',
            'edge_center1(ye,or,wh)','edge_center2(ye,or,bl)',
            'edge_center1(wh,re,or)','edge_center2(wh,re,gr)',
            'edge_center1(wh,gr,re)','edge_center2(wh,gr,gr)',
            'edge_center1(wh,or,wh)','edge_center2(wh,or,ye)',
            'edge_center1(wh,bl,ye)','edge_center2(wh,bl,re)',
            'opposite(wh,ye)','opposite(bl,gr)','opposite(or,re)','opposite(ye,wh)',
            'opposite(gr,bl)','opposite(re,or)',
            'adjacent(wh,bl)','adjacent(wh,or)','adjacent(wh,re)','adjacent(wh,gr)',
            'adjacent(bl,re)','adjacent(bl,or)','adjacent(gr,re)','adjacent(gr,or)',
            'adjacent(ye,bl)','adjacent(ye,or)','adjacent(ye,re)','adjacent(ye,gr)',
            'adjacent(bl,wh)','adjacent(or,wh)','adjacent(re,wh)','adjacent(gr,wh)',
            'adjacent(re,bl)','adjacent(or,bl)','adjacent(re,gr)','adjacent(or,gr)',
            'adjacent(bl,ye)','adjacent(or,ye)','adjacent(re,ye)','adjacent(gr,ye)']
train_pos = ['right_inplace(wh,gr)','right_inplace(ye,re)','right_inplace(ye,gr)']
train_neg = ['right_inplace(wh,or)','right_inplace(wh,re)','right_inplace(wh,bl)','right_inplace(ye,or)','right_inplace(ye,bl)']
target = 'right_inplace'
bk = ['right_inplace(+piece1,+piece2)',
    'edge_center2(+piece1,+piece2,+piece2)']

Rules: [('right_inplace(A,B):-edge_center2(A,B,B)', 1.0), ('right_inplace(A,B):-', 0.0)]

#learning edge_inplace rule

train_data = ['edgepiece(wh,or)','edgepiece(wh,re)','edgepiece(wh,gr)','edgepiece(wh,bl)',
            'edgepiece(ye,or)','edgepiece(ye,re)','edgepiece(ye,gr)','edgepiece(ye,bl)',
            'edge_center1(ye,re,ye)','edge_center2(ye,re,re)',
            'edge_center1(ye,gr,ye)','edge_center2(ye,gr,gr)',
            'edge_center1(ye,bl,re)','edge_center2(ye,bl,or)',
            'edge_center1(ye,or,wh)','edge_center2(ye,or,bl)',
            'edge_center1(wh,re,or)','edge_center2(wh,re,gr)',
            'edge_center1(wh,gr,re)','edge_center2(wh,gr,gr)',
            'edge_center1(wh,or,wh)','edge_center2(wh,or,ye)',
            'edge_center1(wh,bl,ye)','edge_center2(wh,bl,re)',
            'opposite(wh,ye)','opposite(bl,gr)','opposite(or,re)','opposite(ye,wh)',
            'opposite(gr,bl)','opposite(re,or)',
            'adjacent(wh,bl)','adjacent(wh,or)','adjacent(wh,re)','adjacent(wh,gr)',
            'adjacent(bl,re)','adjacent(bl,or)','adjacent(gr,re)','adjacent(gr,or)',
            'adjacent(ye,bl)','adjacent(ye,or)','adjacent(ye,re)','adjacent(ye,gr)',
            'adjacent(bl,wh)','adjacent(or,wh)','adjacent(re,wh)','adjacent(gr,wh)',
            'adjacent(re,bl)','adjacent(or,bl)','adjacent(re,gr)','adjacent(or,gr)',
            'adjacent(bl,ye)','adjacent(or,ye)','adjacent(re,ye)','adjacent(gr,ye)',
            'left_inplace(wh,or)','left_inplace(ye,re)','left_inplace(ye,gr)',
            'right_inplace(wh,gr)','right_inplace(ye,re)','right_inplace(ye,gr)']
train_pos = ['edge_inplace(ye,re)','edge_inplace(ye,gr)']
train_neg = ['edge_inplace(wh,gr)','edge_inplace(wh,or)','edge_inplace(wh,re)','edge_inplace(wh,bl)','edge_inplace(ye,or)','edge_inplace(ye,bl)']
target = 'edge_inplace'
bk = ['edge_inplace(+piece,+piece)',
        'right_inplace(+piece,+piece)',
        'left_inplace(+piece,+piece)']

Rules: [('edge_inplace(A,B):-left_inplace(A,B),right_inplace(A,B)', 1.0), ('edge_inplace(A,B):-right_inplace(A,B)', 0.0), ('edge_inplace(A,B):-right_inplace(A,A)', 0.0), ('edge_inplace(A,B):-', 0.0)]

#learning left move

train_data = ['edgepiece(wh,or)','edgepiece(wh,re)','edgepiece(wh,gr)','edgepiece(wh,bl)',
            'edgepiece(ye,or)','edgepiece(ye,re)','edgepiece(ye,gr)','edgepiece(ye,bl)',
            'edge_center1(ye,re,ye)','edge_center2(ye,re,re)',
            'edge_center1(ye,gr,ye)','edge_center2(ye,gr,gr)',
            'edge_center1(ye,bl,re)','edge_center2(ye,bl,or)',
            'edge_center1(ye,or,wh)','edge_center2(ye,or,bl)',
            'edge_center1(wh,re,or)','edge_center2(wh,re,gr)',
            'edge_center1(wh,gr,re)','edge_center2(wh,gr,gr)',
            'edge_center1(wh,or,wh)','edge_center2(wh,or,ye)',
            'edge_center1(wh,bl,ye)','edge_center2(wh,bl,re)',
            'opposite(wh,ye)','opposite(bl,gr)','opposite(or,re)','opposite(ye,wh)',
            'opposite(gr,bl)','opposite(re,or)',
            'adjacent(wh,bl)','adjacent(wh,or)','adjacent(wh,re)','adjacent(wh,gr)',
            'adjacent(bl,re)','adjacent(bl,or)','adjacent(gr,re)','adjacent(gr,or)',
            'adjacent(ye,bl)','adjacent(ye,or)','adjacent(ye,re)','adjacent(ye,gr)',
            'adjacent(bl,wh)','adjacent(or,wh)','adjacent(re,wh)','adjacent(gr,wh)',
            'adjacent(re,bl)','adjacent(or,bl)','adjacent(re,gr)','adjacent(or,gr)',
            'adjacent(bl,ye)','adjacent(or,ye)','adjacent(re,ye)','adjacent(gr,ye)',
            'left_inplace(wh,or)','left_inplace(ye,re)','left_inplace(ye,gr)',
            'right_inplace(wh,gr)','right_inplace(ye,re)','right_inplace(ye,gr)']
train_pos = ['move_left_one(ye,bl)','move_left_one(wh,re)','move_left_one(wh,gr)']
train_neg = ['move_left_one(wh,or)','move_left_one(wh,bl)','move_left_one(ye,or)','move_left_one(ye,gr)','move_left_one(ye,re)']
target = 'move_left_one'
bk = ['move_left_one(+piece1,+piece2)', 'edge_center1(+piece1,+piece2,-piece)','adjacent(+piece1,+piece)']

Rules (one): [('move_left_one(A,B):-adjacent(A,C),edge_center1(A,B,C)', 1.0), ('move_left_one(A,B):-edge_center1(A,B,C)', 0.0), ('move_left_one(A,B):-edge_center1(A,B,D)', 0.0), ('move_left_one(A,B):-', 0.0)]

train_data = ['edgepiece(wh,or)','edgepiece(wh,re)','edgepiece(wh,gr)','edgepiece(wh,bl)',
            'edgepiece(ye,or)','edgepiece(ye,re)','edgepiece(ye,gr)','edgepiece(ye,bl)',
            'edge_center1(ye,re,ye)','edge_center2(ye,re,re)',
            'edge_center1(ye,gr,ye)','edge_center2(ye,gr,gr)',
            'edge_center1(ye,bl,re)','edge_center2(ye,bl,or)',
            'edge_center1(ye,or,wh)','edge_center2(ye,or,bl)',
            'edge_center1(wh,re,or)','edge_center2(wh,re,gr)',
            'edge_center1(wh,gr,re)','edge_center2(wh,gr,gr)',
            'edge_center1(wh,or,wh)','edge_center2(wh,or,ye)',
            'edge_center1(wh,bl,ye)','edge_center2(wh,bl,re)',
            'opposite(wh,ye)','opposite(bl,gr)','opposite(or,re)','opposite(ye,wh)',
            'opposite(gr,bl)','opposite(re,or)',
            'adjacent(wh,bl)','adjacent(wh,or)','adjacent(wh,re)','adjacent(wh,gr)',
            'adjacent(bl,re)','adjacent(bl,or)','adjacent(gr,re)','adjacent(gr,or)',
            'adjacent(ye,bl)','adjacent(ye,or)','adjacent(ye,re)','adjacent(ye,gr)',
            'adjacent(bl,wh)','adjacent(or,wh)','adjacent(re,wh)','adjacent(gr,wh)',
            'adjacent(re,bl)','adjacent(or,bl)','adjacent(re,gr)','adjacent(or,gr)',
            'adjacent(bl,ye)','adjacent(or,ye)','adjacent(re,ye)','adjacent(gr,ye)',
            'left_inplace(wh,or)','left_inplace(ye,re)','left_inplace(ye,gr)',
            'edge_inplace(ye,re)','edge_inplace(ye,gr)',
            'right_inplace(wh,gr)','right_inplace(ye,re)','right_inplace(ye,gr)',
            'move_left_one(ye,bl)','move_left_one(wh,re)','move_left_one(wh,gr)']
train_pos = ['move_left_two(ye,or)','move_left_two(wh,bl)']
train_neg = ['move_left_two(ye,bl)','move_left_two(wh,re)','move_left_two(wh,gr)',
            'move_left_two(wh,or)','move_left_two(ye,gr)','move_left_two(ye,re)']
target = 'move_left_two'
bk = ['move_left_two(+piece1,+piece2)', 'edge_center1(+piece1,+piece2,-piece)','opposite(+piece1,+piece)']

Rules (two): [('move_left_two(A,B):-opposite(A,C),edge_center1(A,B,C)', 1.0), ('move_left_two(A,B):-edge_center1(A,B,C)', 0.0), ('move_left_two(A,B):-edge_center1(A,B,D)', 0.0), ('move_left_two(A,B):-', 0.0)]

#learning right move

train_data = ['edgepiece(wh,or)','edgepiece(wh,re)','edgepiece(wh,gr)','edgepiece(wh,bl)',
            'edgepiece(ye,or)','edgepiece(ye,re)','edgepiece(ye,gr)','edgepiece(ye,bl)',
            'edge_center1(ye,re,ye)','edge_center2(ye,re,re)',
            'edge_center1(ye,gr,ye)','edge_center2(ye,gr,gr)',
            'edge_center1(ye,bl,re)','edge_center2(ye,bl,gr)',
            'edge_center1(ye,or,wh)','edge_center2(ye,or,re)',
            'edge_center1(wh,re,or)','edge_center2(wh,re,gr)',
            'edge_center1(wh,gr,re)','edge_center2(wh,gr,gr)',
            'edge_center1(wh,or,wh)','edge_center2(wh,or,ye)',
            'edge_center1(wh,bl,ye)','edge_center2(wh,bl,re)',
            'opposite(wh,ye)','opposite(bl,gr)','opposite(or,re)','opposite(ye,wh)',
            'opposite(gr,bl)','opposite(re,or)',
            'adjacent(wh,bl)','adjacent(wh,or)','adjacent(wh,re)','adjacent(wh,gr)',
            'adjacent(bl,re)','adjacent(bl,or)','adjacent(gr,re)','adjacent(gr,or)',
            'adjacent(ye,bl)','adjacent(ye,or)','adjacent(ye,re)','adjacent(ye,gr)',
            'adjacent(bl,wh)','adjacent(or,wh)','adjacent(re,wh)','adjacent(gr,wh)',
            'adjacent(re,bl)','adjacent(or,bl)','adjacent(re,gr)','adjacent(or,gr)',
            'adjacent(bl,ye)','adjacent(or,ye)','adjacent(re,ye)','adjacent(gr,ye)',
            'left_inplace(wh,or)','left_inplace(ye,re)','left_inplace(ye,gr)',
            'edge_inplace(ye,re)','edge_inplace(ye,gr)',
            'right_inplace(wh,gr)','right_inplace(ye,re)','right_inplace(ye,gr)',
            'move_left_one(ye,bl)','move_left_one(wh,re)','move_left_one(wh,gr)',
            'move_left_two(ye,or)','move_left_two(wh,bl)']
train_pos = ['move_right_one(wh,re)','move_right_one(wh,or)','move_right_one(wh,bl)']
train_neg = ['move_right_one(ye,bl)','move_right_one(wh,gr)',
            'move_right_one(ye,or)','move_right_one(ye,gr)','move_right_one(ye,re)']
target = 'move_right_one'
bk = ['move_right_one(+piece1,+piece2)', 'edge_center2(+piece1,+piece2,+piece)','adjacent(+piece2,+piece)']


Rules (one): [('move_right_one(A,B):-edge_center2(A,B,C),adjacent(B,C)', 1.0), ('move_right_one(A,B):-adjacent(B,C)', 0.0)]

train_data = ['edgepiece(wh,or)','edgepiece(wh,re)','edgepiece(wh,gr)','edgepiece(wh,bl)',
            'edgepiece(ye,or)','edgepiece(ye,re)','edgepiece(ye,gr)','edgepiece(ye,bl)',
            'edge_center1(ye,re,ye)','edge_center2(ye,re,re)',
            'edge_center1(ye,gr,ye)','edge_center2(ye,gr,gr)',
            'edge_center1(ye,bl,re)','edge_center2(ye,bl,gr)',
            'edge_center1(ye,or,wh)','edge_center2(ye,or,re)',
            'edge_center1(wh,re,or)','edge_center2(wh,re,gr)',
            'edge_center1(wh,gr,re)','edge_center2(wh,gr,gr)',
            'edge_center1(wh,or,wh)','edge_center2(wh,or,ye)',
            'edge_center1(wh,bl,ye)','edge_center2(wh,bl,re)',
            'opposite(wh,ye)','opposite(bl,gr)','opposite(or,re)','opposite(ye,wh)',
            'opposite(gr,bl)','opposite(re,or)',
            'adjacent(wh,bl)','adjacent(wh,or)','adjacent(wh,re)','adjacent(wh,gr)',
            'adjacent(bl,re)','adjacent(bl,or)','adjacent(gr,re)','adjacent(gr,or)',
            'adjacent(ye,bl)','adjacent(ye,or)','adjacent(ye,re)','adjacent(ye,gr)',
            'adjacent(bl,wh)','adjacent(or,wh)','adjacent(re,wh)','adjacent(gr,wh)',
            'adjacent(re,bl)','adjacent(or,bl)','adjacent(re,gr)','adjacent(or,gr)',
            'adjacent(bl,ye)','adjacent(or,ye)','adjacent(re,ye)','adjacent(gr,ye)',
            'left_inplace(wh,or)','left_inplace(ye,re)','left_inplace(ye,gr)',
            'edge_inplace(ye,re)','edge_inplace(ye,gr)',
            'right_inplace(wh,gr)','right_inplace(ye,re)','right_inplace(ye,gr)',
            'move_left_one(ye,bl)','move_left_one(wh,re)','move_left_one(wh,gr)',
            'move_left_two(ye,or)','move_left_two(wh,bl)']
train_pos = ['move_right_two(ye,bl)','move_right_two(ye,or)']
train_neg = ['move_right_two(wh,bl)','move_right_two(wh,re)','move_right_two(wh,gr)',
            'move_right_two(wh,or)','move_right_two(ye,gr)','move_right_two(ye,re)']
target = 'move_right_two'
bk = ['move_right_two(+piece1,+piece2)', 'edge_center2(+piece1,+piece2,-piece)','opposite(+piece2,+piece)']

Rules (two):[('move_right_two(A,B):-opposite(B,C),edge_center2(A,B,C)', 1.0), ('move_right_two(A,B):-edge_center2(A,B,C)', 0.0), ('move_right_two(A,B):-edge_center2(A,B,D)', 0.0), ('move_right_two(A,B):-', 0.0)]